<?php
define('CABLING_SECRET', "35onoi2=-7#%g03kl");

if( function_exists('acf_add_options_page') ) {
	
	acf_add_options_page(array(
		'page_title' 	=> 'Theme Settings',
		'menu_title'	=> 'Theme Settings',
		'menu_slug' 	=> 'theme-settings',
		'capability'	=> 'edit_posts',
		'redirect'		=> false
	));
	
}

//add SVG to allowed file uploads
function add_file_types_to_uploads($file_types){

    $new_filetypes = array();
    $new_filetypes['svg'] = 'image/svg';
    $file_types = array_merge($file_types, $new_filetypes );

    return $file_types; 
} 
add_action('upload_mimes', 'add_file_types_to_uploads');

//redirect user when access download file
function cabling_redirect_download_single()
{
    if( is_singular('download-file') )
    {
        $file = get_field('file_upload');
        $file_url = wp_get_attachment_url( $file );
        wp_safe_redirect($file_url);
        exit();
    }elseif( is_singular('application') ){
		$url = get_field('redirect_url');
		if( !empty($url) ){			
			wp_safe_redirect($url);
			exit();
		}
	}
}
add_action('template_redirect', 'cabling_redirect_download_single');

function cabling_show_back_btn(){
	echo '<a href="#" class="backbutton box-shadow">'. __('Back to: ','cabling') . '<span clas="back-text"></span></a>';
}

function cabling_show_login_popup(){
	if ( !is_user_logged_in() ) {
		get_template_part( 'template-parts/popup', 'login' );
	}else{
		get_template_part( 'template-parts/popup', 'create-customer' );
	}
}
add_action('wp_footer','cabling_show_login_popup');

add_filter( 'wp_nav_menu_items', 'cabling_add_extra_item_to_header_top_menu', 10, 2 );
function cabling_add_extra_item_to_header_top_menu( $items, $args ) {

    $new_items = '';
	if ( strpos($args->menu->slug, 'top-header') !== false ) {        
        $new_items .= '<li class="menu-item cart-item"><a href="'. esc_url( wc_get_cart_url() ) .'">' . __('Cart','cabling') .'</a></li>';

        if ( is_user_logged_in() ) 
        	$new_items .= '<li class="menu-item"><a href="'. get_permalink( get_option('woocommerce_myaccount_page_id') ) .'">' . __('My Account','cabling') .'</a></li>';
        else
        	$new_items .= '<li class="menu-item my-account"><a href="'. get_permalink( get_option('woocommerce_myaccount_page_id') ) .'">' . __('Sign In','cabling') .'</a></li>';
    }

    return $new_items.$items;
}

function cabling_get_custom_email_html( $link, $heading = false, $mailer, $type ) {

	return wc_get_template_html( $type, array(
		'link_verify' => $link,
		'email_heading' => $heading,
		'sent_to_admin' => false,
		'plain_text'    => false,
		'email'         => $mailer
	) );

}

function cabling_process_register_form(){

	if ( isset( $_POST['register-nounce'] ) && wp_verify_nonce( $_POST['register-nounce'], 'cabling-register' )) {
	   	$recipient = $_POST['register_email'];

	   	$register = home_url('/register/');
		if ( !email_exists( $recipient ) ){
			$email = urlencode($recipient);
			$hash = MD5($recipient.CABLING_SECRET);

			$arg = json_encode(array('email' => $email,'code' => $hash));

			$verify_link = add_query_arg( array(
			    'code' => base64_encode($arg),
			), $register );

			set_transient( $recipient, $hash, DAY_IN_SECONDS );

		   	// load the mailer class
			$mailer = WC()->mailer();

			$type = 'emails/pre-register.php';
			$subject = __("Hi! Please verify your account!", 'cabling');
			$content = cabling_get_custom_email_html( $verify_link, $subject, $mailer, $type );
			$headers = "Content-Type: text/html\r\n";

			$mailer->send( $recipient, $subject, $content, $headers );

			wc_add_notice(sprintf( __('A comfirmation email has been sent to your mailbox <strong>%s</strong><br> Please check you email box and continue your registration within 24 hours','cabling'), $recipient ), 'success');
		}else{
			wc_add_notice( sprintf( __('The email <strong>%s</strong> was registered, please try with other.','cabling'), $recipient ), 'error');
		}
	}

	if ( (isset( $_POST['verify-nounce'] ) && wp_verify_nonce( $_POST['verify-nounce'], 'cabling-verify' )) || (isset( $_POST['customer-nounce'] ) && wp_verify_nonce( $_POST['customer-nounce'], 'cabling-customer' ))) {

		$data = $_POST;
		$customer_id = wc_create_new_customer( $data['user_email'], $data['user_email'], $data['password']);

		if ( $customer_id ) {
			$parent_id = get_current_user_id();

			//check if user was create by a customer
			if (isset( $data['customer-nounce'] )) {
				$sap_no = get_user_meta( $parent_id, 'sap_no', true );
				$group = get_user_meta( $parent_id, 'wcb2b_group', true );

				//get user data by customer parent
				$data['company-name'] = get_user_meta( $parent_id, 'billing_company', true );
				$data['company-address'] = get_user_meta( $parent_id, 'billing_address_1', true );
				$data['billing_country'] = get_user_meta( $parent_id, 'billing_country', true );
				$data['billing_city'] = get_user_meta( $parent_id, 'billing_city', true );
				$data['billing_postcode'] = get_user_meta( $parent_id, 'billing_postcode', true );
				$data['company-name-responsible'] = get_user_meta( $parent_id, 'company_name_responsible', true );
				$data['billing_vat'] = get_user_meta( $parent_id, 'billing_vat', true );

				//update user(child customer) infomations
				update_user_meta( $customer_id, 'sap_no', $sap_no );
				update_user_meta( $customer_id, 'wcb2b_group', $group );
				update_user_meta( $customer_id, 'customer_parent', $parent_id );
			}

			//update user/customer infomations
			update_user_meta( $customer_id, 'has_approve', 'false' );
			update_user_meta( $customer_id, 'first_name', $data['full-name'] );
			update_user_meta( $customer_id, 'billing_first_name', $data['full-name'] );
			update_user_meta( $customer_id, 'shipping_first_name', $data['full-name'] );			
			update_user_meta( $customer_id, 'billing_phone', $data['user-phone'] );
			update_user_meta( $customer_id, 'billing_company', $data['company-name'] );
			update_user_meta( $customer_id, 'shipping_company', $data['company-name'] );
			update_user_meta( $customer_id, 'billing_address_1', $data['company-address'] );
			update_user_meta( $customer_id, 'shipping_address_1', $data['company-address'] );
			update_user_meta( $customer_id, 'billing_country', $data['billing_country'] );
			update_user_meta( $customer_id, 'shipping_country', $data['billing_country'] );
			update_user_meta( $customer_id, 'billing_city', $data['billing_city'] );
			update_user_meta( $customer_id, 'shipping_city', $data['billing_city'] );
			update_user_meta( $customer_id, 'billing_postcode', $data['billing_postcode'] );
			update_user_meta( $customer_id, 'shipping_postcode', $data['billing_postcode'] );				
			update_user_meta( $customer_id, 'company_name_responsible', $data['company-name-responsible'] );
			update_user_meta( $customer_id, 'billing_vat', $data['billing_vat'] );

			//send email to customer
			if( isset( $data['verify-nounce'] ) ){				
				$mailer = WC()->mailer();

				$type = 'emails/register-verify.php';
				$recipient = get_option('admin_email');
				$subject = __("New account need to verify!", 'cabling');
				$content = cabling_get_custom_email_html( $verify_link, $subject, $mailer, $type );
				$headers = "Content-Type: text/html\r\n";

				$mailer->send( $recipient, $subject, $content, $headers );
				$redirect = add_query_arg( 'create-complete', 'true', home_url('/register/'));
				wp_redirect( $redirect );
				exit();
			}
		}		
		
	}
}
add_action('init', 'cabling_process_register_form');

function cabling_modify_user_table( $column ) {
    unset( $column['posts'] );
    $column['sap_no'] = 'SAP No.';
    $column['has_approve'] = 'Verify';
    
    return $column;
}
add_filter( 'manage_users_columns', 'cabling_modify_user_table' );

function cabling_modify_user_table_row( $val, $column_name, $user_id ) {
    switch ($column_name) {
        case 'sap_no' :
        	$sap_no = get_user_meta( $user_id, 'sap_no', true );
            
        	$content = !empty($sap_no) ? $sap_no : '';
            
            return $content;
        case 'has_approve' :
        	$has_approve_val = get_user_meta( $user_id, 'has_approve', true );
            
        	if ( 'true' !== $has_approve_val ) {
        		$content = '<a onclick="cabling_verify_user(this);return false;" data-user="'. $user_id .'" class="cabling_verify button-primary">Verify</a><br>';
        	}else{
        		$content = '<strong>Verified</strong>';
        	}
            
            return $content;
        default:
    }
    return $val;
}
add_filter( 'manage_users_custom_column', 'cabling_modify_user_table_row', 10, 3 );

/**
 * Searching Meta Data in Admin
 */
add_action('pre_user_query','cabling_pre_user_search');
function cabling_pre_user_search($user_search) {
    global $wpdb;
    if (!isset($_GET['s'])) return;

    $search_array = array("sap_no", "first_name", "last_name");

    $user_search->query_from .= " INNER JOIN {$wpdb->usermeta} ON {$wpdb->users}.ID={$wpdb->usermeta}.user_id AND (";
    for($i=0;$i<count($search_array);$i++) {
        if ($i > 0) $user_search->query_from .= " OR ";
            $user_search->query_from .= "{$wpdb->usermeta}.meta_key='" . $search_array[$i] . "'";
        }
    $user_search->query_from .= ")";        
    $custom_where = $wpdb->prepare("{$wpdb->usermeta}.meta_value LIKE '%s'", "%" . $_GET['s'] . "%");
    $user_search->query_where = str_replace('WHERE 1=1 AND (', "WHERE 1=1 AND ({$custom_where} OR ",$user_search->query_where);

}

//change default archive query
function cabling_show_only_parent_post($query) {
	if ( !is_admin() && $query->is_main_query() && $query->is_archive(array('product'))) 
	{
        /*$query->set( 'orderby', 'menu_order' );
        $query->set( 'order', 'ASC' );*/
        $query->set( 'orderby', array( 'menu_order' => 'ASC', 'date' => 'DESC',  ) );

        if( $query->is_post_type_archive(array('company', 'service', 'download', 'application')) )
		{
			$query->set( 'post_parent', 0 );
		}        
	
		if( $query->is_post_type_archive( array("application", 'download', 'reference', 'company', 'service') ) )
		{
			$query->set( 'posts_per_page', -1 );
		}
		
		if( $query->is_post_type_archive( array('event') ) )
		{
			$query->set( 'posts_per_page', -1 );
			$query->set( 'meta_key', 'initial_date' );
			$query->set( 'orderby', 'meta_value' );
			$query->set( 'order', 'ASC' );

            $country = cabling_get_country();
            if( isset($country['name']) )
            {
                $coutry_term = get_term_by('name', $country['name'], 'filter_country');
                if($coutry_term)
                {
                    if(!empty($coutry_term->parent)){
                        $region = get_term_by('term_id', $coutry_term->parent, 'filter_country');
                        $region_name = $region->name;
                    }

                    $tax_query = array('relation' => 'OR');

                    //get by country
                    if( isset($coutry_term->name) )
                        $tax_query[] = array(
                            'taxonomy' => 'filter_country',
                            'field' => 'name',
                            'terms' => $coutry_term->name,
                        );

                    //get by region
                    if( !empty($region_name) )
                        $tax_query[] = array(
                            'taxonomy' => 'filter_country',
                            'field' => 'name',
                            'terms' => $region_name,
                        );
                    $query->set( 'tax_query', $tax_query );
                }
            }
		}
    }
}
add_action( 'pre_get_posts', 'cabling_show_only_parent_post' );

function get_field_wpml( $field_key, $post_id = false, $format_value = true ) {

    // see : http://support.advancedcustomfields.com/forums/topic/wpml-and-acf-options/

    global $sitepress;

    $is_cascade   = $post_id == 'option' && $format_value == true ? true : false;
    $format_value = $post_id == 'option' ? true : $format_value; // force $format_value = true for option

    // get field for default language
    if ( ( $sitepress->get_default_language() == ICL_LANGUAGE_CODE ) && ( $ret = get_field( $field_key, $post_id, $format_value ) ) ) {
       return $ret;
    }

    // get field for current language
    elseif ( $ret = get_field( $field_key . '_' . ICL_LANGUAGE_CODE, $post_id, $format_value ) ) {
        return $ret;
    }

    // get field when if not exists for locale by cascade
    elseif ( $is_cascade ) {
        return get_field( $field_key, $post_id, $format_value );
    }

    return false;
}

// Add product variations ACF rule
add_filter('acf/location/rule_values/post_type', 'acf_location_rule_values_variation');
function acf_location_rule_values_variation( $choices ) {
    $choices['product_variation'] = 'Product Variation';
    return $choices;
}

$GLOBALS['wc_loop_variation_id'] = null;

function is_field_group_for_variation($field_group, $variation_data, $variation_post) {
    return (preg_match( '/Variation/i', $field_group['title'] ) == true);
}

add_action( 'woocommerce_product_after_variable_attributes', function( $loop_index, $variation_data, $variation_post ) {
    $GLOBALS['wc_loop_variation_id'] = $variation_post->ID;

    foreach ( acf_get_field_groups() as $field_group ) {
        if ( is_field_group_for_variation( $field_group, $variation_data, $variation_post ) ) {
            acf_render_fields( $variation_post->ID, acf_get_fields( $field_group ) );
        }
    }

    $GLOBALS['wc_loop_variation_id'] = null;
}, 10, 3 );

add_filter( 'acf/prepare_field', function ( $field ) {
    if ( !$GLOBALS['wc_loop_variation_id'] ) {
        return $field;
    }

    $field['name'] = preg_replace( '/^acf\[/', 'acf_variation[' . $GLOBALS['wc_loop_variation_id'] . '][', $field['name'] );

    return $field;
}, 10, 1);

function rdv__after__render_field( $field ){
    echo "<script>
            (function($) {
                acf.doAction('append', $('#post'));
            })(jQuery);
          </script>";
}
add_action( 'acf/render_field/type=repeater', 'rdv__after__render_field', 10, 1 );

add_action( 'woocommerce_save_product_variation', function( $variation_id, $loop_index ) {
    if ( !isset( $_POST['acf_variation'][$variation_id] ) ) {
        return;
    }

    if ( ! empty( $_POST['acf_variation'][$variation_id] ) && is_array( $fields = $_POST['acf_variation'][$variation_id] )  ) {
        foreach ( $fields as $key => $val ) {
            update_field( $key, $val, $variation_id );
        }
    }

}, 10, 2 );

function cabling_get_list_filter_post(){
	$id = apply_filters( 'wpml_object_id', 293, 'post'  );
	return get_posts(
		array(
			'post_parent__in' => array($id),
			'post_type' => 'acf-field',
			'fields' => 'ids',
			'numberposts' => -1,
		)
	);	 
}

// ADD FIELD TO CATEGORY EDIT PAGE
add_action( 'product_cat_edit_form_fields', '___edit_form_field_term_meta_text' );
function ___edit_form_field_term_meta_text( $term ) {
	
	$filter_posts = cabling_get_list_filter_post();	
	$cat_filter = get_term_meta( $term->term_id, 'cat_filter', true );
	$cat_filter = empty($cat_filter) ? array() : $cat_filter;
	?>

    <tr class="form-field cat_filter-wrap">
        <th scope="row"><label for="cat_filter"><?php _e( 'Filters', 'cabling' ); ?></label></th>
        <td>
            <?php wp_nonce_field( basename( __FILE__ ), 'cat_filter_nonce' ); ?>
			<?php if($filter_posts): ?>
				<?php foreach ($filter_posts as $filter): ?>			
					<label for="<?php echo 'filter_' . $filter ?>" style="display:block; margin-bottom: 10px;">
						<input type="checkbox" name="cat_filter[]" id="<?php echo 'filter_' . $filter ?>" value="<?php echo $filter ?>" <?php checked( in_array($filter, $cat_filter), true, true ) ?>>
						<?php echo get_the_title( $filter ) ?>
					</label>
				<?php endforeach; ?>
			<?php endif; ?>
        </td>
    </tr>
	<?php 
}

// SAVE TERM META (on term edit & create)
add_action( 'edit_product_cat',   '___save_term_meta_text' );
add_action( 'create_product_cat', '___save_term_meta_text' );
function ___save_term_meta_text( $term_id ) {
    // verify the nonce --- remove if you don't care
    if ( ! isset( $_POST['cat_filter_nonce'] ) || ! wp_verify_nonce( $_POST['cat_filter_nonce'], basename( __FILE__ ) ) )
        return;

    update_term_meta( $term_id, 'cat_filter', $_POST['cat_filter'] );
}

add_filter('acf/validate_post_id', 'caner_custom_option_key', 10, 2);
function caner_custom_option_key( $post_id, $_post_id ) {
	if( $_post_id == 'options_language'){
		$post_id = 'options';
	}
	return $post_id;
}

function cabling_languages_list(){
	//global $sitepress;
	$language_wpml = icl_get_languages('skip_missing=0');	
	$language_list = get_field('field_5fa25bc46d4f4', 'options_language');//var_dump($language_list);
	
	if(!empty($language_wpml))
	{
		$key = 0;		
        echo '<div id="cabling_language_list" class="cabling_language_list">';
        echo '<table class="table">';
			echo '<thead><tr>';
			echo '<th>Language</th>';
			echo is_user_logged_in() ? '' : '<th>'. __('Country','cabling') .'</th>';
			echo '</tr></thead>';
			echo '<tbody>';
			foreach($language_wpml as $l)
			{
				echo '<tr>';
				echo '<td>';
					echo '<a href="'.$l['url'].'" data-lang="'.$l['language_code'].'">'.$l['native_name'].'</a>';
				echo '</td>';
				echo '<td>';
				if(!is_user_logged_in() && isset($language_list[$key]['country']))
				{
					foreach($language_list[$key]['country'] as $c)
					{
						$language_url = add_query_arg( 'country', $c['code'], get_the_permalink() );
						$image = wp_get_attachment_image( $c['flag'] );
						echo '<a href="'. esc_url( $language_url ) .'" title="'. $c['country'] .'">'. $image .'</a>';
					}
				}
				echo '</td>';
				echo '</tr>';
				$key++;
			}
			echo '</tbody>';
        echo '</table>';
        echo '</div>';
    }
}

//get current country assosiate with language
function cabling_get_current_country(){
	$code = isset($_SESSION['cabling_country']) ? $_SESSION['cabling_country'] : 0;
	//$language_list = get_field('_language_country', 'option');
	$language_list = get_field('field_5fa25bc46d4f4', 'options_language');
	if($code && !empty($language_list))
	{
		foreach($language_list as $country)
		{
			if($code && $country['country'])
			{
				foreach($country['country'] as $c)
				{					
					if( $c['code'] == $code)
						return $c;
				}
			}
		}
	}
	return;
}

function cabling_get_language_from_country($country){
	$language_list = get_field('field_5fa25bc46d4f4', 'options_language');
	if(!empty($language_list))
	{
		foreach($language_list as $list_countries)
		{
			if($list_countries)
			{
				foreach($list_countries['country'] as $c)
				{					
					if( strtolower(trim($country)) == strtolower(trim($c['country'])) )
						return $list_countries['language_code'];
				}
			}
		}
	}
	return;
}

add_filter('wp_nav_menu_items', 'new_nav_menu_items', 10, 2);
function new_nav_menu_items($items, $args) {
    if ($args->theme_location == 'top-header') {
		$langs = icl_get_languages();
		$country = cabling_get_country();	

		$lang_text = sprintf(__('<span class="lang-title">LANGUAGE:</span> %s <span class="lang-title">COUNTRY:</span> %s', 'cabling'), $langs[ICL_LANGUAGE_CODE]['native_name'], $country['name']);
		$items = $items . '<li class="menu-item show-language"><a href="javascript:void(0)">' . $lang_text . '</a></li>';
	} elseif ($args->theme_location == 'footer-copyright') {
		$country = cabling_get_country();	
		$cu_rate_setting = get_field('cu_rate_setting','options');
		if($cu_rate_setting)
		{
			foreach ($cu_rate_setting as $setting) 
			{				
				$country_rate = !empty($setting['country_code']) ? explode(',', $setting['country_code']) : [];
				if( isset($country['code']) && in_array($country['code'], $country_rate) )
				{
					$cu_rate =  $setting['cu_rate'];
					break;
				}
			}
		}else{
			$cu_rate =  '';
		}
		$items = $items . '<li class="menu-item cu_rate-item"><a href="javascript:void(0)">' . $cu_rate . '</a></li>';
	} 
    return $items;
}

function cabling_get_country() 
{
	if( isset($_SESSION['cabling_country']) )
	{
		$country_code = $_SESSION['cabling_country'];
	}
	elseif( is_user_logged_in() )
	{
		$user_id = get_current_user_id();
		$country_code = get_user_meta( $user_id, 'billing_country', true );
	}
	else
	{
        // Get the country by IP
        $location = ( class_exists( 'WC_Geolocation' ) ? WC_Geolocation::geolocate_ip() : array( 'country' => '' ) );
        // Base fallback
        if ( empty( $location['country'] ) ) {
            $location = wc_format_country_state_string( apply_filters( 'woocommerce_customer_default_location', get_option( 'woocommerce_default_country' ) ) );
        }
        $country_code = ( isset( $location['country'] ) ? $location['country'] : '' );
	}

	$countries = array(
		'INT' =>  'International',
		'AF' =>  'Afghanistan',
		'AX' =>  'Åland Islands',
		'AL' =>  'Albania',
		'DZ' =>  'Algeria',
		'AS' =>  'American Samoa',
		'AD' =>  'Andorra',
		'AO' =>  'Angola',
		'AI' =>  'Anguilla',
		'AQ' =>  'Antarctica',
		'AG' =>  'Antigua and Barbuda',
		'AR' =>  'Argentina',
		'AM' =>  'Armenia',
		'AW' =>  'Aruba',
		'AU' =>  'Australia',
		'AT' =>  'Austria',
		'AZ' =>  'Azerbaijan',
		'BS' =>  'Bahamas',
		'BH' =>  'Bahrain',
		'BD' =>  'Bangladesh',
		'BB' =>  'Barbados',
		'BY' =>  'Belarus',
		'BE' =>  'Belgium',
		'PW' =>  'Belau',
		'BZ' =>  'Belize',
		'BJ' =>  'Benin',
		'BM' =>  'Bermuda',
		'BT' =>  'Bhutan',
		'BO' =>  'Bolivia',
		'BQ' =>  'Bonaire, Saint Eustatius and Saba',
		'BA' =>  'Bosnia and Herzegovina',
		'BW' =>  'Botswana',
		'BV' =>  'Bouvet Island',
		'BR' =>  'Brazil',
		'IO' =>  'British Indian Ocean Territory',
		'BN' =>  'Brunei',
		'BG' =>  'Bulgaria',
		'BF' =>  'Burkina Faso',
		'BI' =>  'Burundi',
		'KH' =>  'Cambodia',
		'CM' =>  'Cameroon',
		'CA' =>  'Canada',
		'CV' =>  'Cape Verde',
		'KY' =>  'Cayman Islands',
		'CF' =>  'Central African Republic',
		'TD' =>  'Chad',
		'CL' =>  'Chile',
		'CN' =>  'China',
		'CX' =>  'Christmas Island',
		'CC' =>  'Cocos (Keeling) Islands',
		'CO' =>  'Colombia',
		'KM' =>  'Comoros',
		'CG' =>  'Congo-Brazzaville',
		'CD' =>  'Congo',
		'CK' =>  'Cook Islands',
		'CR' =>  'Costa Rica',
		'HR' =>  'Croatia',
		'CU' =>  'Cuba',
		'CW' =>  'Cura&ccedil;ao',
		'CY' =>  'Cyprus',
		'CZ' =>  'Czech Republic',
		'DK' =>  'Denmark',
		'DJ' =>  'Djibouti',
		'DM' =>  'Dominica',
		'DO' =>  'Dominican Republic',
		'EC' =>  'Ecuador',
		'EG' =>  'Egypt',
		'SV' =>  'El Salvador',
		'GQ' =>  'Equatorial Guinea',
		'ER' =>  'Eritrea',
		'EE' =>  'Estonia',
		'ET' =>  'Ethiopia',
		'FK' =>  'Falkland Islands',
		'FO' =>  'Faroe Islands',
		'FJ' =>  'Fiji',
		'FI' =>  'Finland',
		'FR' =>  'France',
		'GF' =>  'French Guiana',
		'PF' =>  'French Polynesia',
		'TF' =>  'French Southern Territories',
		'GA' =>  'Gabon',
		'GM' =>  'Gambia',
		'GE' =>  'Georgia',
		'DE' =>  'Germany',
		'GH' =>  'Ghana',
		'GI' =>  'Gibraltar',
		'GR' =>  'Greece',
		'GL' =>  'Greenland',
		'GD' =>  'Grenada',
		'GP' =>  'Guadeloupe',
		'GU' =>  'Guam',
		'GT' =>  'Guatemala',
		'GG' =>  'Guernsey',
		'GN' =>  'Guinea',
		'GW' =>  'Guinea-Bissau',
		'GY' =>  'Guyana',
		'HT' =>  'Haiti',
		'HM' =>  'Heard Island and McDonald Islands',
		'HN' =>  'Honduras',
		'HK' =>  'Hong Kong',
		'HU' =>  'Hungary',
		'IS' =>  'Iceland',
		'IN' =>  'India',
		'ID' =>  'Indonesia',
		'IR' =>  'Iran',
		'IQ' =>  'Iraq',
		'IE' =>  'Ireland',
		'IM' =>  'Isle of Man',
		'IL' =>  'Israel',
		'IT' =>  'Italy',
		'CI' =>  'Ivory Coast',
		'JM' =>  'Jamaica',
		'JP' =>  'Japan',
		'JE' =>  'Jersey',
		'JO' =>  'Jordan',
		'KZ' =>  'Kazakhstan',
		'KE' =>  'Kenya',
		'KI' =>  'Kiribati',
		'KW' =>  'Kuwait',
		'KG' =>  'Kyrgyzstan',
		'LA' =>  'Laos',
		'LV' =>  'Latvia',
		'LB' =>  'Lebanon',
		'LS' =>  'Lesotho',
		'LR' =>  'Liberia',
		'LY' =>  'Libya',
		'LI' =>  'Liechtenstein',
		'LT' =>  'Lithuania',
		'LU' =>  'Luxembourg',
		'MO' =>  'Macao',
		'MK' =>  'North Macedonia',
		'MG' =>  'Madagascar',
		'MW' =>  'Malawi',
		'MY' =>  'Malaysia',
		'MV' =>  'Maldives',
		'ML' =>  'Mali',
		'MT' =>  'Malta',
		'MH' =>  'Marshall Islands',
		'MQ' =>  'Martinique',
		'MR' =>  'Mauritania',
		'MU' =>  'Mauritius',
		'YT' =>  'Mayotte',
		'MX' =>  'Mexico',
		'FM' =>  'Micronesia',
		'MD' =>  'Moldova',
		'MC' =>  'Monaco',
		'MN' =>  'Mongolia',
		'ME' =>  'Montenegro',
		'MS' =>  'Montserrat',
		'MA' =>  'Morocco',
		'MZ' =>  'Mozambique',
		'MM' =>  'Myanmar',
		'NA' =>  'Namibia',
		'NR' =>  'Nauru',
		'NP' =>  'Nepal',
		'NL' =>  'Netherlands',
		'NC' =>  'New Caledonia',
		'NZ' =>  'New Zealand',
		'NI' =>  'Nicaragua',
		'NE' =>  'Niger',
		'NG' =>  'Nigeria',
		'NU' =>  'Niue',
		'NF' =>  'Norfolk Island',
		'MP' =>  'Northern Mariana Islands',
		'KP' =>  'North Korea',
		'NO' =>  'Norway',
		'OM' =>  'Oman',
		'PK' =>  'Pakistan',
		'PS' =>  'Palestinian Territory',
		'PA' =>  'Panama',
		'PG' =>  'Papua New Guinea',
		'PY' =>  'Paraguay',
		'PE' =>  'Peru',
		'PH' =>  'Philippines',
		'PN' =>  'Pitcairn',
		'PL' =>  'Poland',
		'PT' =>  'Portugal',
		'PR' =>  'Puerto Rico',
		'QA' =>  'Qatar',
		'RE' =>  'Reunion',
		'RO' =>  'Romania',
		'RU' =>  'Russia',
		'RW' =>  'Rwanda',
		'BL' =>  'Saint Barthelemy',
		'SH' =>  'Saint Helena',
		'KN' =>  'Saint Kitts and Nevis',
		'LC' =>  'Saint Lucia',
		'MF' =>  'Saint Martin (French part)',
		'SX' =>  'Saint Martin (Dutch part)',
		'PM' =>  'Saint Pierre and Miquelon',
		'VC' =>  'Saint Vincent and the Grenadines',
		'SM' =>  'San Marino',
		'ST' =>  'Sao Tome and Principe',
		'SA' =>  'Saudi Arabia',
		'SN' =>  'Senegal',
		'RS' =>  'Serbia',
		'SC' =>  'Seychelles',
		'SL' =>  'Sierra Leone',
		'SG' =>  'Singapore',
		'SK' =>  'Slovakia',
		'SI' =>  'Slovenia',
		'SB' =>  'Solomon Islands',
		'SO' =>  'Somalia',
		'ZA' =>  'South Africa',
		'GS' =>  'South Georgia and the South Sandwich Islands',
		'KR' =>  'South Korea',
		'SS' =>  'South Sudan',
		'ES' =>  'Spain',
		'LK' =>  'Sri Lanka',
		'SD' =>  'Sudan',
		'SR' =>  'Suriname',
		'SJ' =>  'Svalbard and Jan Mayen',
		'SZ' =>  'Swaziland',
		'SE' =>  'Sweden',
		'CH' =>  'Switzerland',
		'SY' =>  'Syria',
		'TW' =>  'Taiwan',
		'TJ' =>  'Tajikistan',
		'TZ' =>  'Tanzania',
		'TH' =>  'Thailand',
		'TL' =>  'Timor-Leste',
		'TG' =>  'Togo',
		'TK' =>  'Tokelau',
		'TO' =>  'Tonga',
		'TT' =>  'Trinidad and Tobago',
		'TN' =>  'Tunisia',
		'TR' =>  'Turkey',
		'TM' =>  'Turkmenistan',
		'TC' =>  'Turks and Caicos Islands',
		'TV' =>  'Tuvalu',
		'UG' =>  'Uganda',
		'UA' =>  'Ukraine',
		'AE' =>  'United Arab Emirates',
		'GB' =>  'United Kingdom',
		'US' =>  'United States',
		'UM' =>  'United States Minor Outlying Islands',
		'UY' =>  'Uruguay',
		'UZ' =>  'Uzbekistan',
		'VU' =>  'Vanuatu',
		'VA' =>  'Vatican',
		'VE' =>  'Venezuela',
		'VN' =>  'Vietnam',
		'VG' =>  'British Virgin Islands',
		'VI' =>  'US Virgin Islands',
		'WF' =>  'Wallis and Futuna',
		'EH' =>  'Western Sahara',
		'WS' =>  'Samoa',
		'YE' =>  'Yemen',
		'ZM' =>  'Zambia',
		'ZW' =>  'Zimbabwe',
	);
	$country_name = ( isset($countries[$country_code]) ) ? $countries[$country_code] : '';

	return array(
		'name' => $country_name,
		'code' => $country_code,
	);
}   

function cabling_save_country_code() 
{	
	if( is_user_logged_in() )
	{
		// unset cookies
		setcookie('wh-popups-selected-warehouse', null, -1, '/');
		unset($_COOKIE['wh-popups-selected-warehouse']);		
		unset($_SESSION['cabling_country']);

		global $SHIPPING_ZONES_ENABLED;
		$found_warehouse = false;
		
		$user_id = get_current_user_id();
		$geo_country_code = get_user_meta( $user_id, 'billing_country', true );
		$geo_postal_code = get_user_meta( $user_id, 'billing_postcode', true );

		$_SESSION['cabling_country'] = $geo_country_code;
        
        $alt_warehouses_list = (array)json_decode(get_option('warehouse-popups-woocommerce-pro-list'), true);
        if ( is_array($alt_warehouses_list) && sizeof($alt_warehouses_list) > 0 )
        {

            //  first check by shipping zone only for countries from zones enabled list
            if ( in_array($geo_country_code, $SHIPPING_ZONES_ENABLED) )
            {
	            foreach ($alt_warehouses_list as $one_wh)
	            {
		            $wh_zone_country = trim(strtoupper($one_wh['zone_country']));
		            $wh_zone_zip_codes = ( is_array($one_wh['zone_zip_codes']) && sizeof($one_wh['zone_zip_codes']) > 0 ) ? $one_wh['zone_zip_codes'] : array();

		            if ( empty($wh_zone_country) ) continue; // this warehouse has no shipping zone

                    if ( $wh_zone_country == $geo_country_code && is_array($wh_zone_zip_codes) && sizeof($wh_zone_zip_codes) > 0 && in_array($geo_postal_code, $wh_zone_zip_codes) )
                    {
	                    $found_warehouse = $one_wh['id'];
	                    break; // warehouse found by country code and postal code stop loop
                    }
                    else if ( $wh_zone_country == $geo_country_code )
		            {
			            $found_warehouse = $one_wh['id'];
			            continue; // warehouse found by country code, but continue to search try to find better match with country and postal code
		            }
	            }
            }

            // second check by country
            if ( !$found_warehouse )
            {
	            foreach ($alt_warehouses_list as $one_wh)
	            {
		            if ( !$one_wh['countries'] ) continue;
		            $wh_countries = $one_wh['countries'];

		            if ( is_array($wh_countries) && sizeof($wh_countries) > 0 && in_array($geo_country_code, $wh_countries) )
		            {
			            $found_warehouse = $one_wh['id'];
			            break;
		            }
	            }
            }

        }

        if ( $found_warehouse !== false )
        {
			//self::set_warehouse_cookie($found_warehouse); // set
			// set cookies
			setcookie("wh-popups-selected-warehouse", $found_warehouse, time()+36000, '/');
			$_COOKIE['wh-popups-selected-warehouse'] = $found_warehouse;
		}
		else
		{
			//self::set_warehouse_cookie('168dbde956fede45c6abe6aa574cc3ad'); // set default
			// set cookies
			setcookie("wh-popups-selected-warehouse", '168dbde956fede45c6abe6aa574cc3ad', time()+36000, '/');
			$_COOKIE['wh-popups-selected-warehouse'] = '168dbde956fede45c6abe6aa574cc3ad';
        }
	}	
	elseif( isset($_GET['country']) )
	{
		setcookie('wh-popups-selected-warehouse', null, -1, '/');
		unset($_COOKIE['wh-popups-selected-warehouse']);
		$_SESSION['cabling_country'] = $_GET['country'];

		setcookie("wh-popups-selected-warehouse", '168dbde956fede45c6abe6aa574cc3ad', time()+36000, '/');
		$_COOKIE['wh-popups-selected-warehouse'] = '168dbde956fede45c6abe6aa574cc3ad';
		
		$alt_warehouses_list = (array)json_decode(get_option('warehouse-popups-woocommerce-pro-list'), true);
		foreach ($alt_warehouses_list as $key => $one_wh)
		{
			if(gettype(array_search($_GET['country'], $one_wh['countries'])) != 'boolean')
			{
				// set cookies
				setcookie("wh-popups-selected-warehouse", $key, time()+36000, '/');
				$_COOKIE['wh-popups-selected-warehouse'] = $key;
			}
		}

		if(isset($_SERVER['HTTP_REFERER'])) {
			wp_safe_redirect($_SERVER['HTTP_REFERER']);
			exit();
		}
	}
}   
add_action( 'init', 'cabling_save_country_code' );

function my_mce_buttons_2($buttons) {	
	/**
	 * Add in a core button that's disabled by default
	 */
	$buttons[] = 'subscript';
	$buttons[] = 'superscript';

	return $buttons;
}
add_filter('mce_buttons_2', 'my_mce_buttons_2');

function cabling_get_contact_wordwide( $type, $country, $level = '' )
{
	$contact_args = array(
		'post_type' => 'datwyler_contact',
		'posts_per_page' => -1,
		'fields' => 'ids',
        'orderby'=>'menu_order',
        'order' => 'ASC',
		'tax_query' => array(
			array(
				'taxonomy' => 'contact_type',
				'field' => 'term_id',
				'terms' => $type->term_id
			)
		),
		'meta_query' => array(
			array(
				'key' => 'contact_country',
				'value' => $country,
				'compare' => 'REGEXP'
			)
		),
	);

	if($type->term_id == 4983 || $type->term_id == 5914){
		$contact_args['meta_key'] = 'zipcode';
		$contact_args['orderby'] = 'meta_value';
	}

	$contacts = new WP_Query($contact_args);

	if($contacts->have_posts()): ?>
		<div id="<?php echo 'ww_contact_'.$type->term_id ?>" class="card mb-3 <?php echo $level; ?>" style="border: none">
			<div class="card-header" id="<?php echo 'ct_'.$type->term_id ?>">
				<h5 class="mb-0">
					<button class="btn btn-link collapsed" data-toggle="collapse" data-target="#<?php echo 'ct_'.$type->term_id ?>-content" aria-expanded="true" aria-controls="<?php echo 'ct_'.$type->term_id ?>-content">
						<?php echo $type->name ?>
						<svg class="icon-up" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><path d="M177 159.7l136 136c9.4 9.4 9.4 24.6 0 33.9l-22.6 22.6c-9.4 9.4-24.6 9.4-33.9 0L160 255.9l-96.4 96.4c-9.4 9.4-24.6 9.4-33.9 0L7 329.7c-9.4-9.4-9.4-24.6 0-33.9l136-136c9.4-9.5 24.6-9.5 34-.1z"/></svg>
						<svg class="icon-down" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><path d="M143 352.3L7 216.3c-9.4-9.4-9.4-24.6 0-33.9l22.6-22.6c9.4-9.4 24.6-9.4 33.9 0l96.4 96.4 96.4-96.4c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9l-136 136c-9.2 9.4-24.4 9.4-33.8 0z"/></svg>
					</button>
				</h5>
			</div>
			<div id="<?php echo 'ct_'.$type->term_id ?>-content" class="collapse" aria-labelledby="<?php echo 'ct_'.$type->term_id ?>" data-parent="#accordion">
				<div class="card-body">
					<?php while ($contacts->have_posts()):	$contacts->the_post(); ?>
					<?php $contact_id = get_the_ID(); ?>
					<div data-order="<?php echo get_post_field( 'menu_order', $contact_id) ?>" class="row pb-3 mb-3 border-bottom border-dark contact-item contact-<?php echo $contact_id ?>">
						<div class="col-xs-12 col-md-3">
						<?php if($image_id = get_field('image', $contact_id)): ?>
							<?php echo wp_get_attachment_image( $image_id, 'full'); ?>
						<?php else: ?>
							<a href="mailto:<?php echo get_post_meta( $contact_id, 'email', true) ?>">
								<?php echo get_the_title(); ?>
							</a>
						<?php endif; ?>
						</div>
						<div class="col-xs-12 col-md-6">
                            <?php if($image_id): ?>
                                <!--<strong><?php /*echo get_the_title(get_the_ID()); */?></strong><br>-->
                                <strong><?php echo get_post_meta( $contact_id, 'first_name', true); ?></strong><br>
                            <?php endif; ?>
							<?php if($job_title = get_post_meta( $contact_id, 'job_title', true)): ?>
								<strong><?php echo $job_title; ?></strong><br>
							<?php endif; ?>
							<?php if($position = get_post_meta( $contact_id, 'position', true)): ?>
								<span><?php echo $position; ?></span><br>
							<?php endif; ?>
							<?php if($address = get_post_meta( $contact_id, 'address', true)): ?>
								<span><?php echo $address; ?></span><br>
							<?php endif; ?>
							<?php if($zipcode = get_post_meta( $contact_id, 'zipcode', true)): ?>
							    <?php
                                $city = get_post_meta( $contact_id, 'city', true);
                                $city = !empty($city) ? $city : '';
                                $region = get_post_meta( $contact_id, 'region', true);
                                $region = !empty($region) ? $region : '';
                                ?>
								<span><?php printf(__('%s %s %s'), $zipcode, $city, $region ) ?></span><br>
							<?php endif; ?>
                            <?php if($country_ct = get_post_meta( $contact_id, 'country', true)): ?>
								<span><?php echo $country_ct ?></span><br>
							<?php endif; ?>
						</div>
						<div class="col-xs-12 col-md-3">
							<div class="more-if">
								<?php if($phone = get_field('phone')): ?>
									<span><?php printf(__('Tel.: %s', 'cabling'), $phone) ?></span>
								<?php endif; ?>		
								<?php if($fax = get_field('fax')): ?>
									<span><?php printf(__('Fax.: %s', 'cabling'), $fax) ?></span>
								<?php endif; ?>		
								<?php if($mobile = get_field('mobile')): ?>
									<span><?php printf(__('Mobile.: %s', 'cabling'), $mobile) ?></span>
								<?php endif; ?>									
								<?php if($image_id): ?>
									<span>
									<a href="mailto:<?php echo get_post_meta( $contact_id, 'email', true) ?>">
										<?php echo get_post_meta( $contact_id, 'email', true) ?>
									</a>
									</span><br>
                                    <span>
									<a href="mailto:<?php echo get_post_meta( $contact_id, 'email_2', true) ?>">
										<?php echo get_post_meta( $contact_id, 'email_2', true) ?>
									</a>
									</span>
								<?php endif; ?>									
								<?php if($www = get_post_meta( $contact_id, 'www', true)): ?>
									<span>
									<a href="<?php echo $www ?>">
										<?php echo $www ?>
									</a>
									</span>
								<?php endif; ?>
							</div>
						</div>	                	
					</div>	                	
					<?php endwhile; ?>								
				</div>
			</div>
		</div>
	<?php endif; ?>	
	<?php wp_reset_postdata();
	return;
}

function cabling_get_download_file( $type, $download_page, $country )
{
    if( !empty($country) )
    {
        $country_term = get_term_by('name', $country, 'filter_country');
        if($country_term)
        {
            //$country_name = $country_term->name;
            if(!empty($country_term->parent)){
                $region = get_term_by('term_id', $country_term->parent, 'filter_country');
                $region_name = $region->name;
            }
        }
    }

	$dl_args = array(
		'post_type' => 'download-file',
		'posts_per_page' => -1,
		'fields' => 'ids',
        'orderby'=>'menu_order',
        'order' => 'ASC',
		'tax_query' => array(
            'relation' => 'AND',
			array(
				'taxonomy' => 'download_type',
				'field' => 'term_id',
				'terms' => $type->term_id
			)
		),
		'meta_query' => array(
			array(
				'key' => 'parent_type',
				'value' => $download_page,
				//'compare' => 'REGEXP'
			)
		),
	);

    //get by country
    $country_filter = array(
        'relation' => 'OR',
    );
    if( !empty($country_term) )
        $country_filter[] = array(
            'taxonomy' => 'filter_country',
            'field' => 'name',
            'terms' => $country_term->name,
        );

    //get by region
    if( !empty($region_name) )
        $country_filter[] = array(
            'taxonomy' => 'filter_country',
            'field' => 'name',
            'terms' => $region_name,
        );
    if(empty($country_term) && empty($region))
        $country_filter[] = array(
            'taxonomy' => 'filter_country',
            'field' => 'name',
            'terms' => 'International',
        );

    if(count($country_filter) > 1)
        $dl_args['tax_query'][] = $country_filter;
	//var_dump($country_term->name,$region_name);
	$downloads = new WP_Query($dl_args);

	if($downloads->have_posts()): ?>
		<div class="card mb-3" style="border: none" data-country="<?php ?>">
			<div class="card-header" id="<?php echo 'dl' . $type->term_id ?>">
				<h5 class="mb-0">
					<button class="btn btn-link collapsed" data-toggle="collapse" data-target="#<?php echo 'dl' . $type->term_id ?>-content" aria-expanded="true" aria-controls="<?php echo 'dl' . $type->term_id ?>-content">
						<?php echo $type->name ?>
						<svg class="icon-up" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><path d="M177 159.7l136 136c9.4 9.4 9.4 24.6 0 33.9l-22.6 22.6c-9.4 9.4-24.6 9.4-33.9 0L160 255.9l-96.4 96.4c-9.4 9.4-24.6 9.4-33.9 0L7 329.7c-9.4-9.4-9.4-24.6 0-33.9l136-136c9.4-9.5 24.6-9.5 34-.1z"/></svg>
						<svg class="icon-down" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><path d="M143 352.3L7 216.3c-9.4-9.4-9.4-24.6 0-33.9l22.6-22.6c9.4-9.4 24.6-9.4 33.9 0l96.4 96.4 96.4-96.4c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9l-136 136c-9.2 9.4-24.4 9.4-33.8 0z"/></svg>
					</button>
				</h5>
			</div>
			<div id="<?php echo 'dl' . $type->term_id ?>-content" class="collapse" aria-labelledby="<?php echo 'dl' . $type->term_id ?>" data-parent="#accordion">
				<div class="card-body1">
					<?php while ($downloads->have_posts()):	$downloads->the_post(); ?>
                    <?php
                        $file = get_field('file_upload');
                        $download_description = get_field('download_description');
                        $attachment_filesize = size_format( filesize( get_attached_file( $file ) ), 0 );
                        $file_url = wp_get_attachment_url( $file );
                        $filetype = wp_check_filetype( $file_url );
                    ?>
                    <div data-order="<?php echo get_post_field( 'menu_order', get_the_ID( )) ?>" data-file="<?php the_ID( ) ?>" class="download-content">
                        <div class="row">
                            <?php if( has_post_thumbnail(get_the_ID()) ): ?>
                            <div class="col-md-2 col-xs-12">
                                <div class="featured-img">
                                    <?php echo get_the_post_thumbnail( get_the_ID(), 'thumbnail') ?>
                                </div>
                            </div>
                            <?php endif; ?>
			                <?php if( empty($download_description) ): ?>
                            <div class="col-xs-12 col-md-10">
                                <div class="dl-content download-block">
                                    <a href="<?php the_permalink(); ?>">
                                        <?php the_title(); ?>
                                    </a>
                                    <div class="content">
                                        <?php the_content(); ?>
                                        <?php if( $filetype['ext'] ): ?>
                                        <a href="<?php the_permalink(); ?>" class="download-link">
                                            <?php printf('%s [%s]', $filetype['ext'], $attachment_filesize) ?>
                                        </a>
                                        <?php endif; ?>
                                    </div>
                                </div>
                            </div>
			                <?php else: ?>
                                <div class="col-xs-12 col-md-12">
                                    <div class="dl-content">
                                        <?php echo $download_description ?>
                                    </div>
                                </div>
			                <?php endif; ?>
                        </div>
                    </div>
					<?php endwhile; ?>
				</div>
			</div>
		</div>
	<?php endif; ?>
	<?php wp_reset_postdata();
	return;
}

function cabling_get_download_faq()
{
	$dl_args = array(
		'post_type' => 'faq',
		'posts_per_page' => -1,
        'orderby'=>'menu_order',
        'order' => 'ASC',
	);
	$faqs = new WP_Query($dl_args);

	if($faqs->have_posts()): ?>
        <?php while ($faqs->have_posts()):	$faqs->the_post(); ?>
		<div data-order="<?php echo get_post_field( 'menu_order', get_the_ID()) ?>" class="card mb-3" style="border: none">
			<div class="card-header" id="<?php echo 'faq' . get_the_ID() ?>">
				<h5 class="mb-0">
					<button class="btn btn-link collapsed" data-toggle="collapse" data-target="#<?php echo 'faq' . get_the_ID() ?>-content" aria-expanded="true" aria-controls="<?php echo 'faq' . get_the_ID() ?>-content">
						<?php the_title() ?>
						<svg class="icon-up" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><path d="M177 159.7l136 136c9.4 9.4 9.4 24.6 0 33.9l-22.6 22.6c-9.4 9.4-24.6 9.4-33.9 0L160 255.9l-96.4 96.4c-9.4 9.4-24.6 9.4-33.9 0L7 329.7c-9.4-9.4-9.4-24.6 0-33.9l136-136c9.4-9.5 24.6-9.5 34-.1z"/></svg>
						<svg class="icon-down" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><path d="M143 352.3L7 216.3c-9.4-9.4-9.4-24.6 0-33.9l22.6-22.6c9.4-9.4 24.6-9.4 33.9 0l96.4 96.4 96.4-96.4c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9l-136 136c-9.2 9.4-24.4 9.4-33.8 0z"/></svg>
					</button>
				</h5>
			</div>
			<div id="<?php echo 'faq' . get_the_ID() ?>-content" class="collapse" aria-labelledby="<?php echo 'faq' . get_the_ID() ?>" data-parent="#accordion">
				<div class="card-body">
                    <div class="faq-content">
                        <?php the_content() ?>
                    </div>
				</div>
			</div>
		</div>
        <?php endwhile; ?>
	<?php endif; ?>
	<?php wp_reset_postdata();
	return;
}
function custom_searchwp_query($query){
    $post__not_in = get_query_var( 'post__not_in' );
    if( $post__not_in && is_array($post__not_in) )
        $query['where'][] = 'swpwcposts.ID NOT IN ('. implode(',', $post__not_in) .')';

    return $query;
}
add_filter( 'searchwp\query', 'custom_searchwp_query', 10, 1);

add_filter('icl_ls_languages', 'wpml_ls_filter');
function wpml_ls_filter($languages) {
    global $sitepress;
    if($_SERVER["QUERY_STRING"]){
        if(strpos(basename($_SERVER['REQUEST_URI']), $_SERVER["QUERY_STRING"]) !== false){
            foreach($languages as $lang_code => $language){
                $languages[$lang_code]['url'] = $languages[$lang_code]['url']. '?'.$_SERVER["QUERY_STRING"];
            }
        }
    }
    return $languages;
}